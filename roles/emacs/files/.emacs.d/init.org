#+TITLE: Emacs Configuration
#+AUTHOR: Mirco De Zorzi
#+EMAIL: mircodezorzi@protonmail.com

* Meta
** Enable lexical scoping for the current file.
#+begin_src emacs-lisp :tangle yes
;;; -*- lexical-binding: t -*-
#+end_src

** Enable native compilation.
#+begin_src emacs-lisp :tangle yes
(setq package-native-compile t)
#+end_src

** Defer Garbage Collection
#+begin_src emacs-lisp :tangle yes
(setq gc-cons-threshold 100000000)
#+end_src

** Unset =file-name-handler-alist=
#+begin_src emacs-lisp :tangle yes
(defvar file-name-handler-alist-original file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

** Garbage Collection
Tweak garbage collection configuration during initialization.
#+begin_src emacs-lisp :tangle yes
(defvar better-gc-cons-threshold 402653184
  "The default value to use for `gc-cons-threshold'.")

(defvar better-gc-cons-percentage 0.6
  "The default value to use for `gc-cons-percentage'.")

;; Revert to defaults once Emacs has finished starting up.
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold better-gc-cons-threshold
          gc-cons-percentage better-gc-cons-percentage
          file-name-handler-alist file-name-handler-alist-original)
    (makunbound 'file-name-handler-alist-original)))
#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.
#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-startup-hook
  (lambda ()
    (if (boundp 'after-focus-change-function)
      (add-function :after after-focus-change-function
        (lambda ()
          (unless (frame-focus-state)
            (garbage-collect))))
      (add-hook 'after-focus-change-function 'garbage-collect))

    (defun gc-minibuffer-setup-hook ()
      (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

    (defun gc-minibuffer-exit-hook ()
      (garbage-collect)
      (setq gc-cons-threshold better-gc-cons-threshold))

    (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
    (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

** Literate Configuration Compilation
Automatically update configuration file when saving the document.
#+begin_src emacs-lisp :tangle yes
(setq user-emacs-directory "~/code/dotfiles/roles/emacs/files/.emacs.d/")

(defun tangle-init ()
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+end_src

* Packages
Include extra package repositories.
#+begin_src emacs-lisp :tangle yes
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory)
      package-archives
      '(("gnu"   . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("cselpa" . "https://elpa.thecybershadow.net/packages/")))
#+end_src

Install and configure =straight.el=.
#+begin_src emacs-lisp :tangle yes
(defvar bootstrap-version)
(let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(straight-use-package 'el-patch)
(setq straight-use-package-by-default t)
#+end_src

** Diminish
Hide minor mode symbols in modeline.
#+begin_src emacs-lisp :tangle yes
(use-package delight)
#+end_src

* General
** Reduce filesystem clutter
#+begin_src emacs-lisp :tangle yes
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/"))

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))

;; Don't generate lock files. Prevents Angular from breaking.
(setq create-lockfiles nil)
#+end_src

** Cleanup UI
#+begin_src emacs-lisp :tangle yes
(dolist (mode
         '(menu-bar-mode
           tool-bar-mode
           tooltip-mode
           scroll-bar-mode
           blink-cursor-mode))
  (funcall mode 0))
#+end_src

** Saner defaults
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen    t
      initial-scratch-message   nil
      sentence-end-double-space nil
      use-dialog-box            nil
      mark-even-if-inactive     nil
      case-fold-search          nil
      kill-whole-line           t)

(show-paren-mode t)         ;; Show matching parenthesis.
(global-so-long-mode)       ;; Handle long lines better.
(global-font-lock-mode 1)   ;; Always highlight code.
(global-auto-revert-mode 1) ;; Refresh a buffer if changed on disk.
(savehist-mode 1)           ;; Save command history between sessions.

(defalias 'yes-or-no-p 'y-or-n-p) ;; Accept 'y' in lieu of 'yes'.
#+end_src

** Fonts
#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'default nil :font "Source Code Pro 16")
#+end_src

** Beacon
#+begin_src emacs-lisp :tangle yes
(use-package beacon
  :config
  (beacon-mode 1)
  :custom
  (beacon-blink-when-window-changes t) ;; Only flash on window/buffer changes.
  (beacon-blink-when-window-scrolls nil)
  (beacon-blink-when-point-moves    nil)
  (beacon-blink-duration            .5)
  (beacon-blink-delay               .5)
  (beacon-size                      20))
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package solarized-theme
  :config (load-theme 'solarized-dark t)
  :custom-face
  (font-lock-contant-face           ((t (:bold nil :foreground nil))))
  (font-lock-comment-face           ((t (:foreground "#859900"))))
  (font-lock-comment-delimiter-face ((t (:foreground "#859900"))))
  (button                           ((t (:underline nil))))
  (font-lock-keyword-face           ((t (:bold nil))))
  (mode-line                        ((t (:inverse-video t :underline nil))))
  (mode-line-buffer-id              ((t (:inverse-video t :foreground nil))))
  (mode-line-inactive               ((t (:inverse-video t :underline nil)))))
#+end_src

** Better Scrolling
#+begin_src emacs-lisp :tangle yes
(use-package fast-scroll
  :hook
  (fast-scroll-start . (lambda () (flycheck-mode -1)))
  (fast-scroll-end . (lambda () (flycheck-mode 1)))
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq
  ;; Mouse scroll N lines.
  mouse-wheel-scroll-amount '(6 ((shift) . 1))   
  ;; Don't accelerate scrolling.
  mouse-wheel-progressive-speed nil)
#+end_src

** Indent guides
#+begin_src emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom (highlight-indent-guides-method 'character))
#+end_src

** Cursorline
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hl-line-mode)
#+end_src

** Indentation
Somewhat stolen from [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][binchen]].

Set's default indentation to 2 spaces.
#+begin_src emacs-lisp :tagle yes
;;;###autoload
(defun dz/indent-default-setup (n)
  ;; java/c/c++
  (setq-default c-basic-offset n)
  ;; web development
  (setq-default web-mode-markup-indent-offset n
                web-mode-css-indent-offset    n
                web-mode-code-indent-offset   n)
  ;; other
  (setq-default tab-width        n
                evil-shift-width n))

(setq-default indent-tabs-mode nil)
(dz/indent-default-spaces 2)
#+end_src

Set's local indentation to either 2 spaces or 2 wide tabs.
#+begin_src emacs-lisp :tangle yes
;;;###autoload
(defun dz/indent-local-setup (n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local web-mode-markup-indent-offset n
              web-mode-css-indent-offset    n
              web-mode-code-indent-offset   n)
  ;; other
  (setq-local tab-width        n
              evil-shift-width n))

;;;###autoload
(defun dz/indent-tabs ()
  (interactive)
  (setq-local indent-tabs-mode t) ;; Use tab instead of space.
  (dz/indent-local-setup 2))      ;; Indent 2 spaces width.

;;;###autoload
(defun dz/indent-spaces ()
  (interactive)
  (setq-local indent-tabs-mode nil) ;; Use space instead of tab.
  (dz/indent-local-setup 2))        ;; Indent 2 spaces width.
#+end_src

** Origami
#+begin_src emacs-lisp
(use-package origami
  :defer t
  :config 
  ;; Activate it.
  (origami-mode))
#+end_src

** ialign
#+begin_src emacs-lisp :tangle yes
(use-package ialign
  :defer t)
#+end_src

** Relative line numbers
#+begin_src emacs-lisp :tangle yes
(use-package linum-relative
  :hook (prog-mode . display-line-numbers-mode)
  :custom
  (linum-relative-backend 'display-line-numbers-mode)
  (linum-relative-current-symbol ""))
#+end_src

** Key chords
#+begin_src emacs-lisp :tangle yes
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define-global "eu" 'evil-normal-state)
  :custom  (key-chord-two-keys-delay 0.05))
#+end_src

* Tools
** Workspaces
#+begin_src emacs-lisp :tangle yes
(use-package perspective
  :defer t
  :config
  ;; Activate it.
  (persp-mode)
  ;; In the modeline, tell me which workspace I'm in.
  (persp-turn-on-modestring))
#+end_src

** Terminal Emulator
/Pop up a terminal, do some work, then close it using the same command./
Shell-pop uses only one key action to work: If the buffer exists, and weâ€™re in it, then hide it; else jump to it; otherwise create it if it does not exit.
Use line mode by default. This allows to manipulate the terminal buffer while being in normal mode.
#+begin_src emacs-lisp :tangle yes
(use-package shell-pop
  :defer t
  :custom
  ;; This binding toggles popping up a shell, or moving cursour to the shell pop-up.
  (shell-pop-universal-key "M-t")
  ;; Percentage for shell-buffer window size.
  (shell-pop-window-size 30)
  ;; Position of the popped buffer: top, bottom, left, right, full.
  (shell-pop-window-position "bottom")
  ;; Please use an awesome shell.
  (shell-pop-term-shell "/bin/zsh"))

;;;###autoload
(defun @dz/term-init (&rest ignored)
  (term-line-mode))
(advice-add 'ansi-term :after #'@dz/term-init)
(advice-add 'term :after #'@dz/term-init)
#+end_src

#+begin_src emacs-lisp
(defun @dz/vterm-init () 
  (setq mode-line-format       nil
        confirm-kill-processes nil
        hscroll-margin         0))

(defun dz/open-term () 
  (interactive)
  (split-window-vertically)
  (vterm-toggle))

(use-package vterm
  :defer t
  :preface (setq vterm-install t)
  :commands vterm vterm-mode
  :hook (vterm-mode . @dz/vterm-init)
  :config  
  ;; Once vterm is dead, the vterm buffer is useless.
  (setq vterm-kill-buffer-on-exit t)

  (defun +vterm-goto-insert-point-h ()
    "Go to the point we were at when we left insert mode."
    (when +vterm--insert-point
      (goto-char +vterm--insert-point)
      (setq-local +vterm--insert-point nil)))

  (defun +vterm-remember-insert-point-h ()
    "Remember point when leaving insert mode."
    (setq-local +vterm--insert-point (point)))

  ;; Restore the point's location when leaving and re-entering insert mode.
  (add-hook 'vterm-mode-hook
    (defun +vterm-init-remember-point-h ()
      (add-hook 'evil-insert-state-exit-hook #'+vterm-remember-insert-point-h nil t)
      (add-hook 'evil-insert-state-entry-hook #'+vterm-goto-insert-point-h nil t))))

(use-package vterm-toggle
  :after vterm
  :bind ("C-c t" . #'vterm-toggle))
#+end_src

** Undo Tree
#+begin_src emacs-lisp :tangle yes
(use-package undo-tree
  :after evil
  :diminish undo-tree-mode
  :preface (require 'bind-key)
  :init (global-undo-tree-mode)
  :config (evil-set-undo-system 'undo-tree)
  :custom
  (undo-tree-visualizer-diff t)
  (undo-tree-visualizer-timestamps t))
#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :defer t
  :bind (:map evil-normal-state-map
    ("SPC C-c" . magit-dispatch)))
#+end_src

** Git Gutter
#+begin_src emacs-lisp :tangle yes
(use-package git-gutter
  :defer t
  :config

  (use-package git-gutter-fringe
    :config
    ;; Subtle diff indicators in the fringe places the git gutter outside the margins.
    (setq-default fringes-outside-margins t)
    ;; Thin fringe bitmaps.
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224] nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224] nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248] nil nil 'center))

  (global-git-gutter-mode))
#+end_src

** Ivy
#+begin_src emacs-lisp :tangle yes
;;;###autoload
(defun dz/find-file ()
  "Call `counsel-projectile-find-file' if `projectile-project-p', otherwise fallback to `counsel-find-files'."
  (interactive)
  (if (projectile-project-p)
      (counsel-projectile-find-file)
      (counsel-find-file)))
(use-package ivy
  :init (ivy-mode 1)
  :custom 
  (enable-recursive-minibuffers t)
  (ivy-count-format "[%d/%d] ")
  (ivy-initial-inputs-alist nil)
  (ivy-use-virtual-buffers t)
  (ivy-height 10)
  :config
  (defun find-file-right (filename)
    (interactive)
    (split-window-right)
    (other-window 1)
    (find-file filename))
  (defun find-file-below (filename)
    (interactive)
    (split-window-below)
    (other-window 1)
    (find-file filename))
  (dolist (command '(counsel-projectile-find-file
                     counsel-find-file))
    (ivy-set-actions command
    '(("|" find-file-right "open right")
      ("%" find-file-below "open below"))))
  :bind (:map ivy-minibuffer-map
         ("C-h" . ivy-next-line)
         ("C-t" . ivy-previous-line)
         :map ivy-mode-map
         ("C-c" . ivy-dispatching-done)))

(use-package ivy-xref
  :after ivy
  :custom
  (xref-show-definitions-function #'ivy-xref-show-defs)
  (xref-show-xrefs-function #'ivy-xref-show-xrefs))
(use-package swiper
  :after ivy)

(use-package counsel
  :after ivy evil
  :config (counsel-mode)
  :bind (:map evil-normal-state-map
          ("SPC SPC" . counsel-M-x)
          ("SPC C-p" . counsel-projectile-switch-project)
          ("C-p" . dz/find-file)
          ("SPC s" . swiper-isearch)))

(use-package projectile
  :after ivy
  :config (projectile-mode)
  :custom
  (projectile-enable-caching t)
  (projectile-completion-system 'ivy))

(use-package counsel-projectile
  :after counsel projectile)
#+end_src

** Treemacs
#+begin_src emacs-lisp :tangle yes
(use-package treemacs
  :defer t
  :custom
  (treemacs-width 20)
  (treemacs-indentation 2)
  (treemacs-follow-after-init t)
  (treemacs-git-integration t)
  (treemacs-show-hidden-files t)
  :config
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t))

(use-package treemacs-projectile
  :after treemacs projectile evil
  :bind (:map evil-normal-state-map
         ("C-c o t" . treemacs-projectile)))

(use-package lsp-treemacs
  :after treemacs
  :config (lsp-treemacs-sync-mode 1))

(use-package treemacs-all-the-icons
  :after treemacs
  :config (treemacs-load-theme 'all-the-icons))
#+end_src

* Evil Mode
#+begin_src emacs-lisp :tangle yes
(use-package general
  :config (general-override-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package evil
  :custom
  (evil-search-module                     'evil-search)
  (evil-ex-complete-emacs-commands        nil)
  (evil-shift-round                       nil)
  (evil-vsplit-window-right               t)
  (evil-split-window-below                t)
  (evil-want-C-u-scroll                   t)
  (popup-use-optimized-column-computation nil)

  :config
  (evil-mode)

  (defun dz/evil-visual-shift-left ()
    "Shift visual selection left, retains the selection."
    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (funcall (evil-visual-restore)))

  (defun dz/evil-visual-shift-right ()
    "Shift visual selection left, retains the selection."
    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (funcall (evil-visual-restore)))

  (general-define-key
    :states '(insert)
      "TAB" 'tab-to-tab-stop)

  (general-define-key
    :states '(visual) 
      "<" #'dz/evil-visual-shift-left
      ">" #'dz/evil-visual-shift-right)

  (general-define-key
    :states '(normal visual motion)
      "d" #'evil-backward-char
      "n" #'evil-forward-char
      "h" #'evil-next-line
      "t" #'evil-previous-line

      "s" #'evil-ex

      "j" #'evil-delete
      "k" #'evil-find-char-to

      "l" #'evil-search-next
      "L" #'evil-search-previous

      "D" #'evil-beginning-of-line
      "N" #'evil-end-of-line
      "H" (kbd "5h")
      "T" (kbd "5t")

      "C-d" #'evil-window-left
      "C-h" #'evil-window-down
      "C-t" #'evil-window-up
      "C-n" #'evil-window-right))

(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode 1))

(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))
#+end_src

* Language Server
** lsp-mode
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :defer t
  :commands lsp
  :hook ((typescript-mode javascript-mode c++-mode c-mode latex-mode python-mode) . lsp-deferred)
  :bind (:map evil-normal-state-map
          ("<f2>" . lsp-rename)
          ("g r" . lsp-find-references)
          ("g d" . lsp-find-definition))
  :custom
  ;; Disable code lenses
  (lsp-lens-enable nil)

  ;; Disable modeline
  (lsp-modeline-diagnostics-enable nil)

  ;; Disable breadcrumbs
  (lsp-headerline-breadcrumb-enable nil)

  ;; Disable signature
  (lsp-signature-auto-activate nil)
  (lsp-signature-render-documentation nil))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :custom 
  (lsp-ui-sideline-enable nil)
  (lsp-signature-auto-activate nil)
  (lsp-signature-render-documentation nil)
  (lsp-eldoc-enable-hover nil)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-border "black"))
#+end_src

* Auto Complete
#+begin_src emacs-lisp :tangle yes
(use-package company
  :defer t
  :custom
  (company-idle-delay 0.3)
  (company-echo-delay 0.3)
  (company-minimum-prefix-length 1)
  :config (global-company-mode))
#+end_src

* Languages
** Emacs Lisp
#+begin_src emacs-lisp :tangle yes
(use-package ielm
  :defer t
  :commands ielm)

(use-package paredit
  :hook ((lisp-mode emacs-lisp-mode ielm-mode) . paredit-mode))

(use-package rainbow-delimiters
  :hook ((lisp-mode emacs-lisp-mode ielm-mode) . rainbow-delimiters-mode))
#+end_src

** C++
#+begin_src emacs-lisp :tangle yes
(use-package ccls
  :defer t)
#+end_src

** Python
#+begin_src emacs-lisp :tangle yes
(use-package python-mode
  :mode "\\.py\\'"
  :custom (python-shell-interpreter "python3")
  :hook ((python-mode . lsp-deferred)
         (python-mode . (lambda () 
          (setq tab-width        (py-guess-indent-offset)
                evil-shift-width (py-guess-indent-offset))))))

(use-package lsp-pyright
  :after python-mode
  :hook (python-mode . lsp-deferred))

(use-package pyvenv
  :after python-mode
  :config (pyvenv-mode 1))

(use-package py-isort
  :after python-mode
  :hook ((python-mode . pyvenv-mode)
         (before-save . py-isort-before-save)))

(use-package blacken
  :after python-mode
  :hook (python-mode . blacken-mode)
  :custom (blacken-line-length 79))
#+end_src

** Golang
#+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :mode "\\.go\\'"
  :hook ((go-mode     . lsp-deferred)
         (before-save . lsp-format-buffer)
         (before-save . lsp-organize-imports)))

(use-package company-go
  :after company go-mode
  :custom (company-go-show-annotation t)
  :config
  (defun dz/go-mode-hook ()
    (set (make-local-variable 'company-backends)
      '(company-go)))
  :hook (go-mode . dz/go-mode-hook))

(use-package go-eldoc
  :after go-mode
  :hook (go-mode . go-eldoc-setup))

(use-package go-guru 
  :after go-mode
  :hook (go-mode . go-guru-hl-identifier-mode))

(use-package go-tag
  :after go-mode
  :custom (go-tag-args (list "-transform" "camelcase")))
#+end_src

** Javascript/Typescript
#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :mode "\\.js\\'" "\\.jsx\\'" "\\.ts\\'" "\\.tsx\\'"
  :hook (typescript-mode . lsp-deferred)
  :custom (typescript-indent-level 2))
#+end_src

** Web
#+begin_src emacs-lisp :tangle yes
(use-package web-mode
  :mode ("\\.html\\'" "\\.css\\'")

  :custom
  (web-mode-enable-current-element-highlight t)

  :config
  (use-package company-web)
  (use-package css-mode)

  (defun dz/web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset   2
          web-mode-css-indent-offset    2)

    (set (make-local-variable 'company-backends)
      '(company-css
        company-web-html
        company-yasnippet
        company-files)))

  :hook ((web-mode . prog-mode)
         (web-mode . dz/web-mode-hook)
         (web-mode . company-mode)))
#+end_src

*** Emmet
#+begin_src emacs-lisp :tangle yes
(use-package emmet-mode
  :preface (defvar emmet-mode-keymap (make-sparse-keymap))
  :bind (:map emmet-mode-keymap
          ("C-TAB" . emmet-expand-line))
  :hook ((css-mode web-mode html-mode) . emmet-mode))
#+end_src

* Org
#+begin_src emacs-lisp :tangle yes
(use-package org
  :defer t
  :config

  (require 'ox)
  (require 'color)

  (setq org-directory "~/org")

  ;; Mark done tasks with current time.
  (setq org-log-done 'time) 
  ;; Disable annoying indentation behaviour.
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (defun +org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                    'default)
                                :background nil t))))

  (advice-add 'load-theme :after '+org-update-latex-preview-background-color)

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
 

  (add-hook 'org-mode-hook (lambda ()
    (add-to-list 'org-latex-classes
                 '("notes"
                   "\\documentclass{notes}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

  ;; Use mixed pitch font for headers.
  (dolist (face '(org-level-1 org-level-2 org-level-3 org-level-4
                  org-level-5 org-level-6 org-level-7 org-level-8))
    (set-face-attribute face nil :inherit 'mixed-pitch))

  (defun dz/org-faces ()
    (set-face-attribute 'org-block-begin-line nil :slant 'italic)
    (set-face-attribute 'org-block-end-line nil :slant 'italic)
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                          (face-attribute 'default :background) 3)))

  :bind (:map evil-normal-state-map
    ("C-c C-e" . org-export-dispatch))

  :hook ((org-mode . org-indent-mode)
         (org-mode . flyspell-mode)
         (org-mode . dz/org-faces)))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+end_src

** Org Export
#+begin_src emacs-lisp :tangle yes
(use-package ox-hugo 
  :after ox)

(use-package ox-reveal 
  :after ox)
#+end_src

* LaTeX
#+begin_src emacs-lisp :tangle yes
(use-package auctex
  :mode
  ("\\.tex\\'" . latex-mode)

  :custom
	(TeX-save-query                    nil)
	(TeX-source-correlate-method       'synctex)
	(TeX-source-correlate-mode         t)
  (TeX-PDF-mode                      t)
  (TeX-source-correlate-start-server t)
  (TeX-view-program-selection        '((output-pdf "PDF Tools")))

  :config

  (add-hook 'latex-mode-hook 'TeX-fold-mode)
  (add-hook 'latex-mode-hook 'latex-math-mode)
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)

  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))

  (add-hook 'pdf-view-mode-hook
            (lambda () (setq header-line-format nil))))

(use-package company-auctex 
  :after company tex)

(use-package company-math 
  :after company tex)

(use-package reftex
  :after tex
  :commands turn-on-reftex
  :custom
  (reftex-plug-into-AUCTeX t)
	;; RefTeX list of sections, labels and figures shows as vertical bar to the left of the window.
	(reftex-toc-split-windows-horizontally t)
	;; RefTeX table of contents does not indicate which sections are in which files.
	(reftex-toc-include-file-boundaries nil))
#+end_src

* File Formats
** Makefile
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))
#+end_src

** Terraform
#+begin_src emacs-lisp :tangle yes
(use-package terraform-mode
  :mode ("\\.tf$" . terraform-mode))

(use-package company-terraform
  :after company-mode
  :config (company-terraform-init))
#+end_src

** Yaml
#+begin_src emacs-lisp :tangle yes
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+end_src

** Protobuf
#+begin_src emacs-lisp :tangle yes
(use-package protobuf-mode
  :mode ("\\.pb$" . protobuf-mode))
#+end_src

** CMake
#+begin_src emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMakeLists.txt" . cmake-mode))
#+end_src

** Dockerfile
#+begin_src emacs-lisp :tangle yes
(use-package dockerfile-mode
  :mode ("Dockerfile" . dockerfile-mode))

(use-package docker-compose-mode)

(use-package docker
  :bind ("C-c d" . docker))
#+end_src

** Toml
#+begin_src emacs-lisp :tangle yes
(use-package toml-mode
  :mode ("\\.toml$" . toml-mode))
#+end_src

* Spelling
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :defer t
  :init (global-flycheck-mode)
  :custom (flycheck-global-modes '(not org-mode)))
#+end_src

* Snippets
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet
  :defer t
  :hook (after-init . yas-global-mode)
  :bind (:map yas-minor-mode-map
          ("TAB" . yas-expand))
  :custom (yas-prompt-functions '(yas-completing-prompt)))

(use-package yasnippet-snippets
  :after yasnippet
  :custom (yas-snippet-dirs '("~/.emacs.d/snippets")))
#+end_src

* Miscellaneous functions
** Open configuration
#+begin_src emacs-lisp :tangle yes
;;;###autoload
(defun dz/open-config ()
  (interactive)
  (find-file "~/.emacs.d/init.org"))

(define-key evil-normal-state-map (kbd "SPC o c") #'dz/open-config)
#+end_src

** Wrap org source code blocks
#+begin_src emacs-lisp :tangle yes
(defvar def-language nil)
(setq def-language "")

;;;###autoload
(defun dz/org-wrap-source ()
  (interactive)
  (let ((lang (read-string (format "Language [%s]: " def-language) nil nil def-language))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+end_src\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (setq def-language lang)
    (insert (format "#+begin_src %s\n" def-language))))

(define-key evil-visual-state-map (kbd "SPC w") #'dz/org-wrap-source)
#+end_src
