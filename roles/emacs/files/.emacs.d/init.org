#+TITLE: Emacs Configuration
#+AUTHOR: Mirco De Zorzi
#+EMAIL: mircodezorzi@protonmail.com
#+DATE: 2021-01-26

* Introduction
[[https://mircodezorzi.github.io/doc/emacs-configuration/210520-1305-53.png]]

What follows is my literate emacs configuration. Feel free to copy any snippet you wish, as I did with many other configuration over the past year or so.

* Meta
Enable lexical scoping for the current file.
#+BEGIN_SRC emacs-lisp :tangle yes
;;; -*- lexical-binding: t -*-
#+END_SRC

Enable native compilation
#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-native-compile t)
#+END_SRC

Automatically update configuration file when saving the document.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-emacs-directory "~/code/dotfiles/roles/emacs/files/.emacs.d/")

(defun tangle-init ()
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

Tweak garbage collection configuration during initialization.
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar last-file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (lambda () (setq gc-cons-threshold 16777216
                   gc-cons-percentage 0.1
                   file-name-handler-alist last-file-name-handler-alist)))
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
(package-initialize)
#+END_SRC

Include extra package repositories.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

Install =use-package= package manager.
#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setf use-package-always-ensure t)
#+END_SRC

In case some packages are missing, install them.
#+BEGIN_SRC emacs-lisp :tangle yes
(let* ((package--builtins nil)
       (packages
        '(auctex
          all-the-icons
          base16-theme
          beacon
          ccls
          company-auctex
          company-go
          company-lsp
          company-math
          company-posframe
          company-web
          counsel
          counsel-projectile
          dockerfile-mode
          emmet-mode
          evil
          general
          go-eldoc
          go-guru
          go-mode
          highlight-indent-guides
          ivy
          ivy-xref
          key-chord
          lsp-mode
          lsp-ui
          magit
          mixed-pitch
          org
          ormolu
          ox-hugo
          pdf-tools
          ialign
          projectile
          protobuf-mode
          swiper
          tide
          toml-mode
          undo-tree
          use-package
          web-mode
          yasnippet-snippets
          yaml-mode)))
  (let ((packages (seq-remove 'package-installed-p packages)))
    (when packages
      ;; Install uninstalled packages.
      (package-refresh-contents)
      (mapc 'package-install packages))))
#+END_SRC

* General
** Personal information
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name    "Mirco De Zorzi"
      user-mail-address "mircodezorzi@protonmail.com")
#+END_SRC

** Reduce filesystem clutter
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/"))

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))

;; Don't generate lock files. Prevents Angular from breaking.
(setq create-lockfiles nil)
#+END_SRC

** Cleanup UI
#+BEGIN_SRC emacs-lisp :tangle yes
(dolist (mode
         '(menu-bar-mode
           tool-bar-mode       
           tooltip-mode
           scroll-bar-mode     
           blink-cursor-mode)) 
  (funcall mode 0))
#+END_SRC

** Saner defaults
#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen    t
      initial-scratch-message   nil
      sentence-end-double-space nil
      use-dialog-box            nil
      mark-even-if-inactive     nil
      kill-whole-line           t
      case-fold-search          nil)

(set-face-attribute 'default nil :font "Source Code Pro 16")
(set-face-attribute 'fixed-pitch nil :font "Source Code Pro 16")
(set-face-attribute 'variable-pitch nil :font "Bitter 16")

(show-paren-mode t)         ;; Show matching parenthesis
(global-so-long-mode)       ;; Handle long lines better
(global-font-lock-mode 1)   ;; Always highlight code
(global-auto-revert-mode 1) ;; Refresh a buffer if changed on disk

(setq-default indent-tabs-mode nil)

(defalias 'yes-or-no-p 'y-or-n-p) ;; Accept 'y' in lieu of 'yes'.
#+END_SRC

** Mixed pitch
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mixed-pitch
  :defer 3
  :hook (text-mode . mixed-pitch-mode)
  :custom (mixed-pitch-set-height t))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package beacon
  :config
  (beacon-mode 1)
  :custom
  (beacon-blink-when-window-changes t) ;; Only flash on window/buffer changes.
  (beacon-blink-when-window-scrolls nil)
  (beacon-blink-when-point-moves    nil)
  (beacon-blink-duration            .5)
  (beacon-blink-delay               .5)   
  (beacon-size                      20))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (defun dz/dark-theme ()
    (interactive)
    (dolist (i custom-enabled-themes)
        (disable-theme i))
    (load-theme 'doom-one t))

  (defun dz/light-theme ()
    (interactive)
    (dolist (i custom-enabled-themes)
        (disable-theme i)))

  (dz/dark-theme))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package solarized-theme
  :config
  (defun dz/dark-theme ()
    (interactive)
    (dolist (i custom-enabled-themes)
        (disable-theme i))
    (load-theme 'solarized-dark t))

  (defun dz/light-theme ()
    (interactive)
    (dolist (i custom-enabled-themes)
        (disable-theme i)))

  (dz/dark-theme))
#+END_SRC

** Faster Scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fast-scroll
  :defer 1
  :hook
  (fast-scroll-start . (lambda () (flycheck-mode -1)))
  (fast-scroll-end . (lambda () (flycheck-mode 1)))
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+END_SRC

** Display battery in modeline
#+BEGIN_SRC emacs-lisp :tangle yes
(display-time-mode 1)
(unless (equal "Battery status not avalible"
               (battery))
  (display-battery-mode 1))
#+END_SRC

** Indent guides
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character))
#+END_SRC

** Cursorline
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default
    electric-indent-inhibit t ;; Disable annoying indentation behaviour.
    indent-tabs-mode        nil
    tab-width               2
    evil-shift-width        2)
#+END_SRC

Stolen from [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][binchen]]
#+BEGIN_SRC emacs-lisp :tangle yes
(defun dz/indent-setup (n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local web-mode-markup-indent-offset n
              web-mode-css-indent-offset    n
              web-mode-code-indent-offset   n))

(defun dz/indent-tabs ()
  (interactive)
  (setq-local indent-tabs-mode t) ;; Use tab instead of space.
  (dz/indent-setup 2))            ;; Indent 2 spaces width.

(defun dz/indent-spaces ()
  (interactive)
  (setq-local indent-tabs-mode nil) ;; Use space instead of tab.
  (dz/indent-setup 2))              ;; Indent 2 spaces width.
#+END_SRC

** Origami
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package origami
  :defer 3
  :config (origami-mode))
#+END_SRC

** ialign
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ialign
  :defer 3)
#+END_SRC

** Nyan mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nyan-mode
  :config (nyan-mode))
#+END_SRC

** Relative line numbers
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package linum-relative
  :hook (prog-mode . display-line-numbers-mode)
  :custom
  (linum-relative-backend        'display-line-numbers-mode)
  (linum-relative-current-symbol ""))
#+END_SRC

** Key chords
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package key-chord
  :config
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.05)
  (key-chord-define-global "eu" 'evil-normal-state))
#+END_SRC

** Fix scrolling

#+BEGIN_SRC emacs-lisp :tangle yes
(setq
  scroll-conservatively 1000                     ;; Only 'jump' when moving this far
  scroll-margin         4                        ;; Scroll N lines to screen edge
  scroll-step           1                        ;; Keyboard scroll one line at a time
  
  mouse-wheel-scroll-amount '(6 ((shift) . 1))   ;; Mouse scroll N lines
  mouse-wheel-progressive-speed nil              ;; Don't accelerate scrolling
  redisplay-dont-pause t                         ;; Don't pause display on input
  
  ;; Always redraw immediately when scrolling, more responsive and doesn't hang!
  fast-but-imprecise-scrolling nil
  jit-lock-defer-time          0)
#+END_SRC

* Tools
** Terminal Emulator
Use line mode by default. This allows to manipulate the terminal buffer while being in normal mode.
#+BEGIN_SRC emacs-lisp :tangle yes
(defun @dz/term-init (&rest ignored)
  (term-line-mode))

(advice-add 'ansi-term :after #'@dz/term-init)
(advice-add 'term :after #'@dz/term-init)

(defun dz/open-term () 
  (interactive)
  (split-window-vertically)
  (term "/bin/zsh"))
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :defer 3
  :after evil
  :config
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :defer 3
  :bind (:map evil-normal-state-map
    ("SPC C-c" . magit-dispatch)))
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-gutter
  :defer 3
  :config

  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config

    ;; subtle diff indicators in the fringe 
    ;; places the git gutter outside the margins. 
    (setq-default fringes-outside-margins t) 
      ;; thin fringe bitmaps 
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224] nil nil 'center) 
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224] nil nil 'center) 
    (define-fringe-bitmap 'git-gutter-fr:deleted 
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248] nil nil 'center)) 

  (global-git-gutter-mode))
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp :tangle yes
(defun dz/find-file ()
  "Call `counsel-projectile-find-file' if `projectile-project-p', otherwise fallback to `counsel-find-files'."
  (interactive)
  (if (projectile-project-p)
      (counsel-projectile-find-file)
      (counsel-find-file)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :custom
  (enable-recursive-minibuffers t)
  (ivy-height                   10)
  (ivy-initial-inputs-alist     nil)
  (ivy-count-format             "[%d/%d] ")
  (ivy-use-virtual-buffers      t)

  :config
  (ivy-mode 1)

  (use-package swiper)

  (use-package counsel 
    :after evil
    :config (counsel-mode)
    :bind (:map evil-normal-state-map
            ("SPC SPC" . counsel-M-x)
            ("SPC C-p" . counsel-projectile-switch-project)
            ("C-p"     . dz/find-file)
           :map ivy-mode-map
            ("C-c"      . ivy-dispatching-done)))

  (use-package projectile
    :config (projectile-mode)
    :custom
    (projectile-enable-caching     t)
    (projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :after (counsel projectile))

  (defun find-file-right (filename)
    (interactive)
    (split-window-right)
    (other-window 1)
    (find-file filename))

  (defun find-file-below (filename)
    (interactive)
    (split-window-below)
    (other-window 1)
    (find-file filename))

  (dolist (command '(counsel-projectile-find-file
                     counsel-find-file))
    (ivy-set-actions command
    '(("|" find-file-right "open right") 
      ("%" find-file-below "open below")))))
#+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
  :config (evil-mode)

  :custom
  (scroll-step                            1)
  (scroll-conservatively                  10000)
  (evil-search-module                     'evil-search)
  (evil-ex-complete-emacs-commands        nil)
  (evil-shift-round                       nil)
  (evil-vsplit-window-right               t)
  (evil-split-window-below                t)
  (evil-want-C-u-scroll                   t)
  (popup-use-optimized-column-computation nil)

  :config

  (use-package evil-commentary
    :config (evil-commentary-mode 1))

  (use-package evil-surround
    :config (global-evil-surround-mode 1))

  (use-package general
    :config (general-override-mode))

  (general-define-key
    :states '(insert)
      "TAB" 'tab-to-tab-stop)

  (general-define-key
    :states '(normal visual motion)
      "d" 'evil-backward-char
      "n" 'evil-forward-char
      "h" 'evil-next-line
      "t" 'evil-previous-line

      "s" 'evil-ex

      "j" 'evil-delete
      "k" 'evil-find-char-to

      "l" 'evil-search-next
      "L" 'evil-search-previous

      "D" 'evil-beginning-of-line
      "N" 'evil-end-of-line
      "H" (kbd "5h")
      "T" (kbd "5t")

      "C-d" 'evil-window-left
      "C-h" 'evil-window-down
      "C-t" 'evil-window-up
      "C-n" 'evil-window-right))
#+END_SRC

* Language Server
** lsp-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode
  :defer 3
  :commands lsp
  :hook ((typescript-mode vue-mode c++-mode c-mode latex-mode python-mode) . lsp)
  :bind (:map evil-normal-state-map
          ("g r" . lsp-find-references)
          ("g d" . lsp-find-definition)

          ("g D" . lsp-ui-peek-find-definitions)
          ("g R" . lsp-ui-peek-find-references)
          ("g I" . lsp-ui-peek-find-implementation)

          ("SPC s" . swiper-isearch))
  :custom
  (lsp-eldoc-hook nil)
  (lsp-vetur-format-default-formatter-css "none")
  (lsp-vetur-format-default-formatter-html "none")
  (lsp-vetur-format-default-formatter-js "none")
  (lsp-vetur-validation-template nil))
#+END_SRC

** lsp-ui
#+BEGIN_SRC emacs-lisp :tangle yes
;; disable annoying breadcrumbs
(setq lsp-headerline-breadcrumb-enable nil)

(use-package lsp-ui
  :commands lsp-ui-mode

  :custom
  ;; lsp-ui-doc
  ;(lsp-ui-doc-enable              t)
  ;(lsp-ui-doc-position            'at-point)
  ;(lsp-ui-doc-border              "orange")
  ;(lsp-ui-doc-header              nil)
  ;(lsp-ui-doc-include-signature   t)
  ;(lsp-ui-doc-max-width           120)
  ;(lsp-ui-doc-max-height          30)


  ;; lsp-ui-sidebar
  (lsp-ui-sideline-enable         nil)

  ;; lsp-ui-peek
  (lsp-ui-peek-enable             t)
  (lsp-ui-peek-peek-height        20)
  (lsp-ui-peek-list-width         50)
  (lsp-ui-peek-fontify            'on-demand))
#+END_SRC

** XRefs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-xref
  :defer 3
  :after ivy
  :custom
  (xref-show-definitions-function #'ivy-xref-show-defs)
  (xref-show-xrefs-function       #'ivy-xref-show-xrefs))
#+END_SRC

* Auto Complete
To fix the alignment issues caused by =mixed-pitch-mode= in non-prog buffers we must use this package.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-lsp
  :after company
  :commands company-lsp
  :custom
  (company-minimum-prefix-length     1)
  (company-idle-delay                0)
  (company-lsp-async                 t)
  (company-tooltip-align-annotations t)

  :config
  (use-package company-posframe
    :diminish company-posframe-mode
    :hook (global-company-mode . company-box-mode)
    :config (company-posframe-mode 1))

  (push 'company-lsp company-backends)
  (global-company-mode))
#+END_SRC

* Languages
** C++
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ccls
  :defer 3); (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python-mode
  :defer 3
  :custom (python-shell-interpreter "python3")
  :hook (python-mode . lsp-deferred)
  :config

  (use-package lsp-pyright
    :hook (python-mode . lsp-deferred))

  (use-package pyvenv
    :config (pyvenv-mode 1))

  (use-package py-isort
    :hook ((python-mode . pyvenv-mode)
           (before-save . py-isort-before-save)))

  (use-package blacken
    :hook (python-mode . blacken-mode)
    :custom (blacken-line-length 79)))
#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package go-mode
  :mode "\\.go\\'"
  :hook ((go-mode     . lsp-deferred)
         (before-save . lsp-format-buffer)
         (before-save . lsp-organize-imports))

  :config
  (use-package company-go
    :custom (company-go-show-annotation t) 
    :config
    (defun dz/go-mode-hook () 
      (set (make-local-variable 'company-backends) 
        '(company-go)))
    :hook (go-mode . dz/go-mode-hook))

  (use-package go-eldoc
    :hook (go-mode . go-eldoc-setup))

  (use-package go-guru
    :hook (go-mode . go-guru-hl-identifier-mode))

  (use-package go-tag ;;; binary dependency: gomodifytags
    :custom (go-tag-args (list "-transform" "camelcase"))))
#+END_SRC

** Javascript/Typescript
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tide
  :mode "\\.ts\\'"
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)))
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
  :mode ("\\.html\\'" "\\.css\\'" "\\.js\\'" "\\.ts\\'")

  :custom
  (web-mode-enable-current-element-highlight t)

  :config
  (use-package company-web)
  (use-package css-mode)

  (defun dz/web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset   2
          web-mode-css-indent-offset    2)

    (set (make-local-variable 'company-backends)
      '(company-css
        company-web-html
        company-yasnippet
        company-files)))

  :hook ((web-mode . prog-mode)
         (web-mode . dz/web-mode-hook)
         (web-mode . company-mode)))
#+END_SRC

*** Emmet
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package emmet-mode
  :preface (defvar emmet-mode-keymap (make-sparse-keymap))
  :bind (:map emmet-mode-keymap
          ("C-TAB" . emmet-expand-line))
  :hook ((css-mode web-mode html-mode) . emmet-mode))
#+END_SRC

** Vue
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vue-mode
  :mode "\\.vue\\'"
  :hook ((vue-mode . prettier-js-mode)
         (vue-mode . lsp)
         (vue-mode . (lambda () (set-face-background 'mmm-default-submode-face nil))))
  :config
  (setq prettier-js-args '("--parser vue")))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :defer 3
  :config

  (use-package ox-hugo :after ox)
  (use-package ox-reveal :after ox)

  (require 'ox)

  (use-package org-bullets 
    :hook (org-mode . org-bullets-mode))

  (setq org-log-done 'time) ;; mark done tasks with current time
  ;(electric-indent-mode) ;; remove annoying indent behaviour

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (defun +org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                    'default)
                                :background nil t))))

  (advice-add 'load-theme :after '+org-update-latex-preview-background-color)

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (dolist (face '(org-level-1 
                  org-level-2 
                  org-level-3 
                  org-level-4 
                  org-level-5 
                  org-level-6 
                  org-level-7 
                  org-level-8))
    (set-face-attribute face nil :inherit 'mixed-pitch))

  (defun dz/org-faces ()
    (require 'color)
    (set-face-attribute 'org-block-begin-line nil :slant 'italic)
    (set-face-attribute 'org-block-end-line nil :slant 'italic)
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                          (face-attribute 'default :background) 3)))

  :custom (org-directory "~/org")

  :bind (:map evil-normal-state-map
    ("C-c C-e" . org-export-dispatch))

  :hook ((org-mode . org-indent-mode)
         (org-mode . flyspell-mode)
         (org-mode . dz/org-faces)))
#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-auctex :defer 3)
(use-package company-math :defer 3)

;(add-hook 'latex-mode-hook 'TeX-fold-mode)
;(add-hook 'latex-mode-hook 'latex-math-mode)
;(add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
(add-hook 'latex-mode-hook (lambda ()
  (add-to-list 'org-latex-classes
               '("report"
                 "\\documentclass{report}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
(add-hook 'pdf-view-mode-hook
          (lambda () (setq header-line-format nil)))

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
           #'TeX-revert-document-buffer)
#+END_SRC

* Configuration Files
** Terraform
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package terraform-mode
  :defer 3
  :mode ("\\.tf$" . terraform-mode)
  :diminish terraform-mode
  :config 
  (use-package company-terraform
    :defer 3
    :after company-mode
    :config (company-terraform-init)))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+END_SRC

** Protobuf
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package protobuf-mode
  :mode ("\\.pb$" . protobuf-mode))
#+END_SRC

** CMake
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMakeLists\\.txt\\'" . cmake-mode))
#+END_SRC

** Dockerfile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dockerfile-mode
  :mode ("Dockerfile" . dockerfile-mode))
#+END_SRC

** Toml
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package toml-mode
  :mode ("\\.toml$" . toml-mode))
#+END_SRC

* Spelling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
  :defer 3
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :custom (flycheck-global-modes '(not org-mode)))
#+END_SRC

* Snippets
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :defer 3
  :hook (after-init . yas-global-mode)
  :diminish yas-minor-mode
  :bind (:map yas-minor-mode-map
          ("TAB" . yas-expand))
  :custom (yas-prompt-functions '(yas-completing-prompt))
  :config
  (use-package yasnippet-snippets
    :defer 3
    :after yasnippet
    :custom (yas-snippet-dirs '("~/.emacs.d/snippets"))))

#+END_SRC

* Miscellaneous dz/functions
** Wrap org source code blocks
#+BEGIN_SRC emacs-lisp :tangle yes
(setq def-language "")

(defun dz/org-wrap-source ()
  (interactive)
  (let ((lang (read-string (format "Language [%s]: " def-language) nil nil def-language))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+END_SRC\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (setq def-language lang)
    (insert (format "#+BEGIN_SRC %s\n" def-language))))

(define-key evil-visual-state-map (kbd "SPC w") 'dz/org-wrap-source)
#+END_SRC

** Open configuration
#+BEGIN_SRC emacs-lisp :tangle yes
(defun dz/open-config ()
  (interactive)
  (find-file "~/.emacs.d/init.org"))

(define-key evil-normal-state-map (kbd "SPC o c") 'dz/open-config)
(define-key evil-normal-state-map (kbd "SPC o a") (lambda () (find-file "~/org/agenda.org")))
#+END_SRC
