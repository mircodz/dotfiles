#+TITLE: Emacs Configuration
#+AUTHOR: Mirco De Zorzi
#+EMAIL: mircodezorzi@protonmail.com
#+TAGS[]: emacs

* Meta
Enable lexical scoping for the current file.
#+BEGIN_SRC emacs-lisp :tangle yes
;;; -*- lexical-binding: t -*-
#+END_SRC

Enable native compilation.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-native-compile t)
#+END_SRC

Automatically update configuration file when saving the document.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-emacs-directory "~/code/dotfiles/roles/emacs/files/.emacs.d/")

(defun tangle-init ()
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

Tweak garbage collection configuration during initialization.
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar last-file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (lambda () (setq gc-cons-threshold 16777216
                   gc-cons-percentage 0.1
                   file-name-handler-alist last-file-name-handler-alist)))
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
(package-initialize)
#+END_SRC

Include extra package repositories.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

Install =use-package= package manager.
#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setf use-package-always-ensure t)
#+END_SRC

In case some packages are missing, install them.
#+BEGIN_SRC emacs-lisp :tangle yes
(let* ((package--builtins nil)
       (packages
        '(auctex
          base16-theme
          beacon
          blacken
          ccls
          cmake-mode
          company
          company-auctex
          company-box
          company-go
          company-lsp
          company-math
          company-posframe
          company-terraform
          company-web
          counsel
          counsel-projectile
          delight
          dockerfile-mode
          docker-compose-mode
          docker
          emmet-mode
          evil
          evil-commentary
          evil-surround
          fast-scroll
          flycheck
          general
          git-gutter
          git-gutter-fringe
          go-eldoc
          go-guru
          go-mode
          go-tag
          highlight-indent-guides
          ialign
          ivy
          ivy-xref
          key-chord
          linum-relative
          lsp-mode
          lsp-pyright
          lsp-treemacs
          lsp-ui
          magit
          mixed-pitch
          org
          origami
          ox-hugo
          ox-reveal
          projectile
          protobuf-mode
          py-isort
          python-mode
          pyvenv
          solarized-theme
          swiper
          terraform-mode
          toml-mode
          tree-sitter
          treemacs
          treemacs-all-the-icons
          treemacs-projectile
          typescript-mode
          undo-tree
          vue-mode
          web-mode
          yaml-mode
          yasnippet
          yasnippet-snippets)))
  (let ((packages (seq-remove 'package-installed-p packages)))
    (when packages
      ;; Install uninstalled packages.
      (package-refresh-contents)
      (mapc 'package-install packages))))
(use-package delight) ;; fide minor mode symbols in modeline, keeping it much cleaner
#+END_SRC

* General
** Personal information
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name    "Mirco De Zorzi"
      user-mail-address "mircodezorzi@protonmail.com")
#+END_SRC

** Reduce filesystem clutter
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/"))

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))

;; Don't generate lock files. Prevents Angular from breaking.
(setq create-lockfiles nil)
#+END_SRC

** Cleanup UI
#+BEGIN_SRC emacs-lisp :tangle yes
(dolist (mode
         '(menu-bar-mode
           tool-bar-mode
           tooltip-mode
           scroll-bar-mode
           blink-cursor-mode))
  (funcall mode 0))
#+END_SRC

** Saner defaults
#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen    t
      initial-scratch-message   nil
      sentence-end-double-space nil
      use-dialog-box            nil
      mark-even-if-inactive     nil
      kill-whole-line           t
      case-fold-search          nil)

(setq-default
  indent-tabs-mode        nil
  tab-width               2
  evil-shift-width        2)

(set-face-attribute 'default nil 
  :font "SF Mono" ;:font "SpaceMono Nerd Font"
  :height 160
  :weight 'normal
  :width 'normal)

(set-face-attribute 'fixed-pitch nil 
  :font "SF Mono" ;:font "SpaceMono Nerd Font"
  :height 160
  :weight 'normal
  :width 'normal)

(set-face-attribute 'variable-pitch nil 
  :font "ETbb"
  :height 180
  :weight 'normal
  :width 'normal)

(show-paren-mode t)         ;; Show matching parenthesis.
(global-so-long-mode)       ;; Handle long lines better.
(global-font-lock-mode 1)   ;; Always highlight code.
(global-auto-revert-mode 1) ;; Refresh a buffer if changed on disk.

(defalias 'yes-or-no-p 'y-or-n-p) ;; Accept 'y' in lieu of 'yes'.
#+END_SRC

** Mixed pitch
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mixed-pitch
  :defer 3
  :hook (text-mode . mixed-pitch-mode)
  :custom (mixed-pitch-set-height t))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package beacon
  :config
  (beacon-mode 1)
  :custom
  (beacon-blink-when-window-changes t) ;; Only flash on window/buffer changes.
  (beacon-blink-when-window-scrolls nil)
  (beacon-blink-when-point-moves    nil)
  (beacon-blink-duration            .5)
  (beacon-blink-delay               .5)
  (beacon-size                      20))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :config (load-theme 'solarized-dark t)
  :custom-face
  (font-lock-contant-face ((t (:bold nil :foreground nil))))
  (font-lock-keyword-face ((t (:bold nil))))
  (mode-line              ((t (:inverse-video t :underline nil))))
  (mode-line-buffer-id    ((t (:inverse-video t :foreground nil))))
  (mode-line-inactive     ((t (:inverse-video t :underline nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package base16-theme
  :config
  (load-theme 'base16-tomorrow-night t))
#+END_SRC

** Better Scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fast-scroll
  :hook
  (fast-scroll-start . (lambda () (flycheck-mode -1)))
  (fast-scroll-end . (lambda () (flycheck-mode 1)))
  :config
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(setq
  ;scroll-conservatively 1000                     ;; Only 'jump' when moving this far.
  ;scroll-margin         4                        ;; Scroll N lines to screen edge.
  ;scroll-step           1                        ;; Keyboard scroll one line at a time.

  mouse-wheel-scroll-amount '(6 ((shift) . 1))   ;; Mouse scroll N lines.
  mouse-wheel-progressive-speed nil              ;; Don't accelerate scrolling.
  redisplay-dont-pause t                         ;; Don't pause display on input.

  ;; Always redraw immediately when scrolling, more responsive and doesn't hang!
  fast-but-imprecise-scrolling nil
  jit-lock-defer-time          0)
#+END_SRC

** Indent guides
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom (highlight-indent-guides-method 'character))
#+END_SRC

** Cursorline
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)
#+END_SRC

** Indentation
Stolen from [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][binchen]]
#+BEGIN_SRC emacs-lisp :tangle yes
;;;###autoload
(defun dz/indent-setup (n)

  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local web-mode-markup-indent-offset n
              web-mode-css-indent-offset    n
              web-mode-code-indent-offset   n))

;;;###autoload
(defun dz/indent-tabs ()
  (interactive)
  (setq-local indent-tabs-mode t) ;; Use tab instead of space.
  (dz/indent-setup 2))            ;; Indent 2 spaces width.

;;;###autoload
(defun dz/indent-spaces ()
  (interactive)
  (setq-local indent-tabs-mode nil) ;; Use space instead of tab.
  (dz/indent-setup 2))              ;; Indent 2 spaces width.
#+END_SRC

** Origami
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package origami
  :defer 3
  :config (origami-mode))
#+END_SRC

** ialign
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ialign
  :defer 3)
#+END_SRC

** Relative line numbers
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package linum-relative
  :hook (prog-mode . display-line-numbers-mode)
  :custom
  (linum-relative-backend        'display-line-numbers-mode)
  (linum-relative-current-symbol ""))
#+END_SRC

** Key chords
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package key-chord
  :config
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.05)
  (key-chord-define-global "eu" 'evil-normal-state))
#+END_SRC

* Tools
** Terminal Emulator
Use line mode by default. This allows to manipulate the terminal buffer while being in normal mode.
#+BEGIN_SRC emacs-lisp :tangle yes
;;;###autoload
(defun @dz/term-init (&rest ignored)
  (term-line-mode))

(advice-add 'ansi-term :after #'@dz/term-init)
(advice-add 'term :after #'@dz/term-init)

;;;###autoload
(defun dz/open-term ()
  (interactive)
  (split-window-vertically)
  (term "/bin/zsh"))
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :defer 3
  :config
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :defer 3
  :bind (:map evil-normal-state-map
    ("SPC C-c" . magit-dispatch)))
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-gutter
  :defer 3
  :config

  (use-package git-gutter-fringe
    :config
    ;; Subtle diff indicators in the fringe places the git gutter outside the margins.
    (setq-default fringes-outside-margins t)
    ;; Thin fringe bitmaps.
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224] nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224
       224 224 224 224 224] nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248] nil nil 'center))

  (global-git-gutter-mode))
#+END_SRC

** Ivy
#+BEGIN_SRC emacs-lisp :tangle yes
;;;###autoload
(defun dz/find-file ()
  "Call `counsel-projectile-find-file' if `projectile-project-p', otherwise fallback to `counsel-find-files'."
  (interactive)
  (if (projectile-project-p)
      (counsel-projectile-find-file)
      (counsel-find-file)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :init (ivy-mode 1)

  :custom 
  (enable-recursive-minibuffers t)
  (ivy-height                   10)
  (ivy-initial-inputs-alist     nil)
  (ivy-count-format             "[%d/%d] ")
  (ivy-use-virtual-buffers      t)

  :config
  (defun find-file-right (filename)
    (interactive)
    (split-window-right)
    (other-window 1)
    (find-file filename))

  (defun find-file-below (filename)
    (interactive)
    (split-window-below)
    (other-window 1)
    (find-file filename))

  (dolist (command '(counsel-projectile-find-file
                     counsel-find-file))
    (ivy-set-actions command
    '(("|" find-file-right "open right")
      ("%" find-file-below "open below"))))

  :bind (:map ivy-minibuffer-map
         ("C-h" . ivy-next-line)
         ("C-t" . ivy-previous-line)
         :map ivy-mode-map
         ("C-c" . ivy-dispatching-done)))

(use-package ivy-xref
  :after ivy
  :custom
  (xref-show-definitions-function #'ivy-xref-show-defs)
  (xref-show-xrefs-function       #'ivy-xref-show-xrefs))

(use-package swiper
  :after ivy)

(use-package counsel
  :after ivy evil
  :config (counsel-mode)
  :bind (:map evil-normal-state-map
          ("SPC SPC" . counsel-M-x)
          ("SPC C-p" . counsel-projectile-switch-project)
          ("SPC s" . swiper-isearch)
          ("C-p" . dz/find-file)))

(use-package projectile
  :after ivy
  :config (projectile-mode)
  :custom
  (projectile-enable-caching     t)
  (projectile-completion-system 'ivy))

(use-package counsel-projectile
  :after counsel projectile)
#+END_SRC

** Treesitter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tree-sitter
  :defer 3
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package treemacs
  :defer 3
  :custom
  (treemacs-width 20)
  (treemacs-indentation 2)
  (treemacs-follow-after-init t)
  (treemacs-git-integration t)
  (treemacs-show-hidden-files t)
  :config
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t))

(use-package treemacs-projectile
  :after treemacs projectile evil
  :bind (:map evil-normal-state-map
         ("C-c o t" . treemacs-projectile)))

(use-package lsp-treemacs
  :after treemacs
  :config (lsp-treemacs-sync-mode 1))

(use-package treemacs-all-the-icons
  :after treemacs
  :config (treemacs-load-theme 'all-the-icons))
#+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package general
  :config (general-override-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
  :custom
  (evil-search-module                     'evil-search)
  (evil-ex-complete-emacs-commands        nil)
  (evil-shift-round                       nil)
  (evil-vsplit-window-right               t)
  (evil-split-window-below                t)
  (evil-want-C-u-scroll                   t)
  (popup-use-optimized-column-computation nil)

  :config
  (evil-mode)

  (defun dz/evil-visual-shift-left ()
    "Shift visual selection left, retains the selection."
    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (funcall (evil-visual-restore)))

  (defun dz/evil-visual-shift-right ()
    "Shift visual selection left, retains the selection."
    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (funcall (evil-visual-restore)))

  (general-define-key
    :states '(insert)
      "TAB" 'tab-to-tab-stop)

  (general-define-key

    :states '(visual) 
      "<" #'dz/evil-visual-shift-left
      ">" #'dz/evil-visual-shift-right)

  (general-define-key
    :states '(normal visual motion)
      "d" #'evil-backward-char
      "n" #'evil-forward-char
      "h" #'evil-next-line
      "t" #'evil-previous-line

      "s" #'evil-ex

      "j" #'evil-delete
      "k" #'evil-find-char-to

      "l" #'evil-search-next
      "L" #'evil-search-previous

      "D" #'evil-beginning-of-line
      "N" #'evil-end-of-line
      "H" (kbd "5h")
      "T" (kbd "5t")

      "C-d" #'evil-window-left
      "C-h" #'evil-window-down
      "C-t" #'evil-window-up
      "C-n" #'evil-window-right))

(use-package evil-commentary
  :after evil
  :config (evil-commentary-mode 1))

(use-package evil-surround
  :after evil
  :config (global-evil-surround-mode 1))
#+END_SRC

* Language Server
** lsp-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :defer 3
    :commands lsp
    :hook ((typescript-mode
            javascript-mode
            vue-mode
            c++-mode
            c-mode
            latex-mode
            python-mode) . lsp-deferred)
    :bind (:map evil-normal-state-map
            ("g r" . lsp-find-references)
            ("g d" . lsp-find-definition))
    :custom
    ;; disable breadcrumbs
    (lsp-headerline-breadcrumb-enable nil)

    ;; vue related configuration
    (lsp-vetur-format-default-formatter-css "none")
    (lsp-vetur-format-default-formatter-html "none")
    (lsp-vetur-format-default-formatter-js "none")
    (lsp-vetur-validation-template nil))

  (use-package lsp-ui
    :after lsp-mode
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable   t)
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-doc-border   "white"))
#+END_SRC

* Auto Complete
To fix the alignment issues caused by =mixed-pitch-mode= in non-prog buffers we must use this package.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :defer 3
  :custom
  (company-idle-delay 0)
  (company-echo-delay 0)
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  :config
  (global-company-mode))

(use-package company-lsp
  :after company
  :commands company-lsp
  :custom
  (company-lsp-async t)
  (company-lsp-enable-snippet t)
  (company-lsp-enable-recompletion t)
  (company-lsp-cache-candidates 'auto)
  :config
  (push 'company-lsp company-backends))

(use-package company-posframe
  :delight
  :after company
  :config (company-posframe-mode 1))

(use-package company-box
  :delight
  :after company
  :hook (company-mode . company-box-mode))
#+END_SRC

* Languages
** Emacs Lisp
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ielm
  :defer 3
  :commands ielm)

(use-package paredit
  :hook ((lisp-mode emacs-lisp-mode ielm-mode) . paredit-mode))

(use-package rainbow-delimiters
  :hook ((lisp-mode emacs-lisp-mode ielm-mode) . rainbow-delimiters-mode))
#+END_SRC

** C++
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ccls
  :defer 3)
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python-mode
  :defer 3
  :custom (python-shell-interpreter "python3")
  :hook ((python-mode . lsp-deferred)
         (python-mode . (lambda () 
          (setq tab-width        (py-guess-indent-offset)
                evil-shift-width (py-guess-indent-offset))))))

(use-package lsp-pyright
  :after python-mode
  :hook (python-mode . lsp-deferred))

(use-package pyvenv
  :after python-mode
  :config (pyvenv-mode 1))

(use-package py-isort
  :after python-mode
  :hook ((python-mode . pyvenv-mode)
         (before-save . py-isort-before-save)))

(use-package blacken
  :after python-mode
  :hook (python-mode . blacken-mode)
  :custom (blacken-line-length 79))
#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package go-mode
  :mode "\\.go\\'"
  :hook ((go-mode     . lsp-deferred)
         (before-save . lsp-format-buffer)
         (before-save . lsp-organize-imports)))

(use-package company-go
  :after company go-mode
  :custom (company-go-show-annotation t)
  :config
  (defun dz/go-mode-hook ()
    (set (make-local-variable 'company-backends)
      '(company-go)))
  :hook (go-mode . dz/go-mode-hook))

(use-package go-eldoc
  :after go-mode
  :hook (go-mode . go-eldoc-setup))

(use-package go-guru 
  :after go-mode
  :hook (go-mode . go-guru-hl-identifier-mode))

(use-package go-tag
  :after go-mode
  :custom (go-tag-args (list "-transform" "camelcase")))
#+END_SRC

** Javascript/Typescript
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :custom (typescript-indent-level 2))
#+END_SRC

** Web
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
  :mode ("\\.html\\'" "\\.css\\'")

  :custom
  (web-mode-enable-current-element-highlight t)

  :config
  (use-package company-web)
  (use-package css-mode)

  (defun dz/web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset   2
          web-mode-css-indent-offset    2)

    (set (make-local-variable 'company-backends)
      '(company-css
        company-web-html
        company-yasnippet
        company-files)))

  :hook ((web-mode . prog-mode)
         (web-mode . dz/web-mode-hook)
         (web-mode . company-mode)))
#+END_SRC

*** Emmet
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package emmet-mode
  :preface (defvar emmet-mode-keymap (make-sparse-keymap))
  :bind (:map emmet-mode-keymap
          ("C-TAB" . emmet-expand-line))
  :hook ((css-mode web-mode html-mode) . emmet-mode))
#+END_SRC

** Vue
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vue-mode
  :mode "\\.vue\\'"
  :hook ((vue-mode . prettier-js-mode)
         (vue-mode . lsp)
         (vue-mode . (lambda () (set-face-background 'mmm-default-submode-face nil))))
  :config (setq prettier-js-args '("--parser vue")))
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :defer 3
  :config

  (require 'ox)
  (require 'color)

  (setq org-directory "~/org")

  ;; Mark done tasks with current time.
  (setq org-log-done 'time) 
  ;; Disable annoying indentation behaviour.
  (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (defun +org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                    'default)
                                :background nil t))))

  (advice-add 'load-theme :after '+org-update-latex-preview-background-color)

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
 
  ;; Use mixed pitch font for headers.
  (dolist (face '(org-level-1 org-level-2 org-level-3 org-level-4
                  org-level-5 org-level-6 org-level-7 org-level-8))
    (set-face-attribute face nil :inherit 'mixed-pitch))

  (defun dz/org-faces ()
    (set-face-attribute 'org-block-begin-line nil :slant 'italic)
    (set-face-attribute 'org-block-end-line nil :slant 'italic)
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                          (face-attribute 'default :background) 3)))

  :bind (:map evil-normal-state-map
    ("C-c C-e" . org-export-dispatch))

  :hook ((org-mode . org-indent-mode)
         (org-mode . flyspell-mode)
         (org-mode . dz/org-faces)))

;(use-package org-bullets
;  :after org
;  :hook (org-mode . org-bullets-mode))
#+END_SRC

** Org Export
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-hugo 
  :after ox)

(use-package ox-reveal 
  :after ox)
#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package auctex
  :mode
  ("\\.tex\\'" . latex-mode)

  :custom
	(TeX-save-query                    nil)
	(TeX-source-correlate-method       'synctex)
	(TeX-source-correlate-mode         t)
  (TeX-PDF-mode                      t)
  (TeX-source-correlate-start-server t)
  (TeX-view-program-selection        '((output-pdf "PDF Tools")))

  :config

  ;(add-hook 'latex-mode-hook 'TeX-fold-mode)
  ;(add-hook 'latex-mode-hook 'latex-math-mode)
  ;(add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)

  (add-hook 'latex-mode-hook (lambda ()
    (add-to-list 'org-latex-classes
                 '("report"
                   "\\documentclass{report}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))

  (add-hook 'pdf-view-mode-hook
            (lambda () (setq header-line-format nil)))

  ;; Update PDF buffers after successful LaTeX runs.
  (add-hook 'TeX-after-compilation-finished-functions
             #'TeX-revert-document-buffer))

(use-package company-auctex 
  :after company tex)

(use-package company-math 
  :after company tex)

(use-package reftex
  :after tex
  :commands turn-on-reftex
  :custom
  (reftex-plug-into-AUCTeX t)
	;; RefTeX list of sections, labels and figures shows as vertical bar to the left of the window.
	(reftex-toc-split-windows-horizontally t)
	;; RefTeX table of contents does not indicate which sections are in which files.
	(reftex-toc-include-file-boundaries nil))
#+END_SRC

* Configuration Files
** Terraform
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package terraform-mode
  :mode ("\\.tf$" . terraform-mode))

(use-package company-terraform
  :after company-mode
  :config (company-terraform-init))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+END_SRC

** Protobuf
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package protobuf-mode
  :mode ("\\.pb$" . protobuf-mode))
#+END_SRC

** CMake
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cmake-mode
  :mode ("CMakeLists\\.txt\\'" . cmake-mode))
#+END_SRC

** Dockerfile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dockerfile-mode
  :mode ("Dockerfile" . dockerfile-mode))

(use-package docker-compose-mode)

(use-package docker
  :bind ("C-c d" . docker))
#+END_SRC

** Toml
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package toml-mode
  :mode ("\\.toml$" . toml-mode))
#+END_SRC

* Spelling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
  :defer 3
  :init (global-flycheck-mode)
  :custom (flycheck-global-modes '(not org-mode)))
#+END_SRC

* Snippets
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :defer 3
  :hook (after-init . yas-global-mode)
  :bind (:map yas-minor-mode-map
          ("TAB" . yas-expand))
  :custom (yas-prompt-functions '(yas-completing-prompt)))

(use-package yasnippet-snippets
  :after yasnippet
  :custom (yas-snippet-dirs '("~/.emacs.d/snippets")))
#+END_SRC

* Miscellaneous functions
** Open configuration
#+BEGIN_SRC emacs-lisp :tangle yes
;;;###autoload
(defun dz/open-config ()
  (interactive)
  (find-file "~/.emacs.d/init.org"))

(define-key evil-normal-state-map (kbd "SPC o c") #'dz/open-config)
#+END_SRC

** Wrap org source code blocks
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar def-language nil)
(setq def-language "")

;;;###autoload
(defun dz/org-wrap-source ()
  (interactive)
  (let ((lang (read-string (format "Language [%s]: " def-language) nil nil def-language))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+END_SRC\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (setq def-language lang)
    (insert (format "#+BEGIN_SRC %s\n" def-language))))

(define-key evil-visual-state-map (kbd "SPC w") #'dz/org-wrap-source)
#+END_SRC
